{"version":3,"sources":["components/MaterialIcon.jsx","data/jobStatusConfig.js","components/StatusIndicator.jsx","utils/rating.utils.js","components/JobItemPreview.jsx","components/RatingDisplay.jsx","services/api/config.js","services/api/utils/errorHandler.utils.js","services/api/utils/database.utils.js","services/api/utils/validation.utils.js","services/api/routes/root.js","services/api/routes/status.js","services/api/api.js","components/StatusDropdown.jsx","containers/StatusToggle.jsx","components/JobItemDetailView.jsx","containers/JobItemToggle.jsx","containers/JobList.jsx","containers/StepDivider.jsx","components/InputItem.jsx","data/jobRatingConfig.js","components/JobRatingItem.jsx","data/jobItemFormConfig.js","containers/JobItemForm.jsx","utils/text.utils.js","components/Header.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["MaterialIcon","name","extraClasses","classListOut","className","STATUS_TEXT_DEFAULTS","0","1","2","3","4","5","6","7","8","9","StatusIndicator","statusNumber","statusText","toggleCallback","STATUS_NUMBER_TO_ICON","outStatusText","onClick","reducerSum","acc","val","getAverageRating","rating","decimals","Error","Object","keys","length","ratingVals","values","ratingSum","reduce","ratingAvg","Number","isInteger","Math","sign","console","error","toFixed","err","JobItemPreview","job","toggleIcon","infoHeader","title","company","statusIndicator","status","ratingSummary","window","getSelection","toString","RatingDisplay","n","iconName","coloredLen","round","_","times","key","ICON_COLORED","ICON_UNCOLORED","ENTRY_ID_PATH_REGEX","errorHandler","alert","database","load","response","JSON","parse","localStorage","getItem","undefined","setItem","stringify","log","noDatabaseHandler","save","db","isValidIndex","idx","route","getDatabase","getDatabaseEntry","path","test","isValidEntryIdPath","parseInt","slice","entry","appendToDatabase","obj","push","updateEntry","newObj","splice","deleteFromDatabase","updateStatus","newStatus","statusNum","includes","rootRoute","api","get","post","put","statusRoute","delete","StatusDropdown","itemKey","updateCallback","defaultOption","value","configuredOptions","entries","map","id","onChange","e","newOption","target","options","selectedIndex","handleChange","StatusToggle","content","useState","editMode","setEditMode","toggleEditMode","JobItemDetailView","editModeCallback","totalAvgRating","toggleListener","toggleBtn","statusToggle","topSection","subheaderSection","location","timeModel","specsSection","contractTerm","salary","notesSection","notes","ratingHeader","ratingCategories","mapKey","rkey","rval","ratingTotal","ratingSection","itemEditBtn","type","itemDeleteBtn","confirm","buttonsSection","JobItemToggle","expanded","setExpanded","toggleExpanded","JobList","jobs","StepVisualizer","currentIndex","maxIndex","finishedIndexColor","activeIndexColor","inactiveIndexColor","FINISHED_ICON","INACTIVE_ICON","StepDivider","children","initialIndex","setIsFinalStep","index","setIndex","MAX_INDEX","React","Children","count","useEffect","stepVisualizer","mainContent","leftBtn","rightBtn","btns","InputItem","label","inKey","handleChangeCb","htmlFor","RATING_LINE_REGEX","JobRatingItem","previousRating","sendData","text","setText","HAS_PREVIOUS_RATING","newText","forEach","isValidRating","split","every","line","textAreaLabel","textArea","cols","rows","userInfo","submitBtn","ratingsArr","ratingsObj","onSubmit","STEP_CONFIG","OBJ_VALUE_REGEX","JobItemForm","toggleFormCallback","previousObject","previousIndex","state","setState","setRating","isFinalStep","hasPreviousObject","current","isValidInput","inputObj","flatProps","header","stepLabels","trim","spaceless","join","charAt","toLowerCase","pascalToCamel","newData","now","Date","meta","createdAt","editedAt","cancelBtn","Header","href","Footer","App","data","setData","updateView","showJobItemForm","setShowJobItemForm","toggleJobItemForm","jobItem","jobEditData","setJobEditData","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0a14787f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n/**\r\n * A wrapper for Google's Material Icons with optional extra classes.\r\n * @param {string} name - The Material Icon's name.\r\n * @param {string} [extraClasses = \"\"] - A whitespace-separated list of extra classes.\r\n */\r\nconst MaterialIcon = ({ name, extraClasses=\"\" }) => {\r\n    let classListOut = \"material-icons\"\r\n    if (extraClasses) classListOut += \" \" + extraClasses\r\n\r\n    return <i className={classListOut}>{ name }</i>\r\n}\r\n\r\nexport default MaterialIcon","export const STATUS_TEXT_DEFAULTS = {\r\n    0: \"new\",\r\n    1: \"sent application\",\r\n    2: \"interview in progress\",\r\n    3: \"coding in progress\",\r\n    4: \"received offer\",\r\n    5: \"accepted offer\",\r\n    6: \"got rejected\",\r\n    7: \"rejected further process\",\r\n    8: \"rejected offer\",\r\n    9: \"pending\"\r\n}","import React from 'react';\r\nimport MaterialIcon from \"./MaterialIcon\"\r\nimport { STATUS_TEXT_DEFAULTS } from '../data/jobStatusConfig'\r\n\r\n\r\n/**\r\n * Display a job status with an icon.\r\n * @param {number} statusNumber - The number (key) of the job status.\r\n * @param {string} [statusText = \"\"] - An optional job status text.\r\n * @param {function} toggleCallback - A callback to notify about a toggle action.\r\n */\r\nconst StatusIndicator = ({ statusNumber, statusText=\"\", toggleCallback }) => {\r\n    \r\n    const STATUS_NUMBER_TO_ICON = {\r\n        0: <MaterialIcon name=\"stop_circle\" extraClasses=\"purple\" />,\r\n        1: <MaterialIcon name=\"forward_to_inbox\" extraClasses=\"orange\" />,\r\n        2: <MaterialIcon name=\"call\" extraClasses=\"orange\" />,\r\n        3: <MaterialIcon name=\"code\" extraClasses=\"orange\" />,\r\n        4: <MaterialIcon name=\"check_circle\" extraClasses=\"orange\" />,\r\n        5: <MaterialIcon name=\"check_circle\" extraClasses=\"green\" />,\r\n        6: <MaterialIcon name=\"cancel\" extraClasses=\"red\" />,\r\n        7: <MaterialIcon name=\"pan_tool\" extraClasses=\"red\" />,\r\n        8: <MaterialIcon name=\"check_circle\" extraClasses=\"red\" />,\r\n        9: <MaterialIcon name=\"pending\" extraClasses=\"orange\" />\r\n    }\r\n\r\n    // use default statusText if needed\r\n    let outStatusText = statusText ? statusText : STATUS_TEXT_DEFAULTS[statusNumber]\r\n\r\n    /* RENDER */\r\n    return <span\r\n                className=\"status-indicator\"\r\n                onClick={toggleCallback}\r\n                >\r\n                    { STATUS_NUMBER_TO_ICON[statusNumber] }\r\n                    <h4>{outStatusText}</h4>\r\n            </span>\r\n}\r\n\r\nexport default StatusIndicator;","// reducer to get a sum\r\nconst reducerSum = (acc, val) => acc + val\r\n\r\n/**\r\n * average the rating of all values of the object\r\n * @param {object} rating - A rating object with key-value pairs.\r\n * @param {number} [decimals=2] - Number of decimals after dot.\r\n */\r\nexport const getAverageRating = (rating, decimals=2) => {\r\n    try {\r\n        if (typeof rating !== \"object\") throw new Error(\"'rating' input parameter must be an object.\")\r\n        if (Object.keys(rating).length === 0) throw new Error (\"'rating' input parameter must not be empty.\")\r\n        let ratingVals = Object.values(rating)\r\n\r\n        let ratingSum = ratingVals.reduce(reducerSum)\r\n        if (typeof ratingSum !== \"number\") throw new Error(\"Result of summing up rating values is not a number.\")\r\n\r\n        let ratingAvg = ratingSum / ratingVals.length\r\n\r\n        if (!Number.isInteger(decimals) || Math.sign(decimals) < 0) {\r\n            console.error(\"'decimals' input parameter was no positive integer. Used default value 2 instead.\")\r\n            return ratingAvg.toFixed(2)\r\n        } else {\r\n            return ratingAvg.toFixed(decimals)\r\n        }\r\n    } catch(err) {\r\n        console.error(err)\r\n        return \"error\"\r\n    }\r\n}","import React from 'react';\r\nimport MaterialIcon from './MaterialIcon'\r\nimport StatusIndicator from './StatusIndicator'\r\nimport { getAverageRating } from \"../utils/rating.utils\"\r\n\r\n\r\n\r\n/**\r\n * A preview containing information related to a job.\r\n * @param {object} job - The data related to a job entry.\r\n * @param {function} toggleCallback - A callback upon toggling the view.\r\n */\r\nconst JobItemPreview = ({ job, toggleCallback }) => {\r\n\r\n\r\n    /* FUNCTIONS */\r\n\r\n    // toggle job item preview (maximize)\r\n    const toggleListener = () => {\r\n        if (window.getSelection().toString().length === 0) toggleCallback()\r\n    }\r\n\r\n\r\n    /* JSX */\r\n\r\n    const toggleIcon = <MaterialIcon name=\"keyboard_arrow_down\" />\r\n\r\n    const infoHeader = <h3>{job.title} @ {job.company}</h3>\r\n\r\n    const statusIndicator = <StatusIndicator statusNumber={job.status} statusText={job.statusText} />\r\n\r\n    const ratingSummary = <span>\r\n        <MaterialIcon name=\"star_rate\" extraClasses=\"orange\" />\r\n        <h4>{ getAverageRating(job.rating) }</h4>\r\n    </span>\r\n\r\n\r\n\r\n    /* RENDER */\r\n\r\n    return (\r\n        <div className=\"job-item-preview top-pane\" onClick={() => toggleListener()}>\r\n            { toggleIcon }\r\n            { infoHeader }\r\n            { statusIndicator }\r\n            { ratingSummary }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JobItemPreview;","import React from 'react'\r\nimport _ from 'lodash'\r\nimport MaterialIcon from \"./MaterialIcon\"\r\n\r\n\r\n\r\n/**\r\n * Display a 5-level rating.\r\n * @param {number} rating - The rating expected to be within range [0, 10]\r\n * @param {string} [iconName = \"star_rate\"] - The name of the Material Icon to be used.\r\n */\r\nconst RatingDisplay = ({ rating, iconName=\"star_rate\" }) => {\r\n    \r\n    // maps from input rating [0, 10] to [0, 5] interval\r\n    const normalize = (n) => {\r\n        return Math.round(n / 2)\r\n    }\r\n\r\n    // number of colored icons\r\n    const coloredLen = normalize(rating)\r\n\r\n\r\n    /* JSX */\r\n    const ICON_COLORED = (key=0) => <MaterialIcon\r\n        key={key}\r\n        name={iconName}\r\n        extraClasses=\"colored\"\r\n    />\r\n\r\n    const ICON_UNCOLORED = (key=0) => <MaterialIcon\r\n        key={key}    \r\n        name={iconName}\r\n        extraClasses=\"uncolored\"\r\n    />\r\n\r\n\r\n    /* RENDER */\r\n    return <div className=\"rating-display\">\r\n        {_.times(coloredLen, (key) => ICON_COLORED(\"i_c\" + key))}\r\n        {_.times(5 - coloredLen, (key) => ICON_UNCOLORED(\"i_uc\" + key))}\r\n    </div>\r\n}\r\n\r\nexport default RatingDisplay","export const DB_KEY = \"japp\"\r\nexport const ENTRY_ID_PATH_REGEX = /^(\\/)([0-9]{1,4})$/","import { DB_KEY } from '../config'\r\n\r\n\r\n\r\n/**\r\n * To be called when there is no database for this app given current configurations.\r\n */\r\nexport const noDatabaseHandler = () => {\r\n    try {\r\n        localStorage.setItem(DB_KEY, JSON.stringify([]))\r\n        console.log(`No database under '${DB_KEY}' key. Created new database under that key.`)\r\n    } catch(err) {\r\n        errorHandler(err)\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Default error handler.\r\n * @param {Error} err - An error object.\r\n */\r\nexport const errorHandler = (err) => {\r\n    console.error(err)\r\n    alert(err)\r\n}","import { DB_KEY } from '../config'\r\nimport { noDatabaseHandler, errorHandler } from './errorHandler.utils'\r\n\r\n\r\n\r\n/**\r\n * GET\r\n * Gets the database whose key is specified by DB_KEY variable.\r\n * @return {array<object>} The database entries as objects.\r\n */\r\nconst load = () => {\r\n    try {\r\n        let response = JSON.parse(localStorage.getItem(DB_KEY))\r\n        if (response == undefined || response == null) return noDatabaseHandler()            \r\n        return response\r\n    } catch(err) {\r\n        errorHandler(err)\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Saves database entries to local storage.\r\n * @param {array<object>} db - The database entries.\r\n */\r\nconst save = (db) => {\r\n    try {\r\n        localStorage.setItem(DB_KEY, JSON.stringify(db))\r\n    } catch(err) {\r\n        errorHandler(err)\r\n    }\r\n}\r\n\r\n\r\nconst database = { load, save }\r\n\r\nexport default database","import { STATUS_TEXT_DEFAULTS } from '../../../data/jobStatusConfig'\r\nimport { ENTRY_ID_PATH_REGEX } from '../config'\r\n\r\n\r\n\r\n/**\r\n * Checks whether given parameter is a valid index.\r\n * @param {number} idx - Expected to be a integer at least 0.\r\n */\r\nexport const isValidIndex = (idx) => {\r\n    if (typeof idx !== \"number\") {\r\n        console.error(\"Validation of index failed: not a number.\")\r\n        return false\r\n    } else if (!Number.isInteger(idx)) {\r\n        console.error(\"Validation of index failed: not an integer.\")\r\n        return false\r\n    } else if (idx < 0) {\r\n        console.error(\"Validation of index failed: index less than 0\")\r\n        return false\r\n    }\r\n\r\n    return true\r\n}\r\n\r\n\r\n/**\r\n * Checks whether given parameter is a valid status.\r\n * @param {number} statusNum - Expected to be a status number that is specified as key in STATUS_TEXT_DEFAULTS configuration.\r\n */\r\nexport const isValidStatus = (statusNum) => {\r\n    let VALID_STATUS_NUMS = Object.keys(STATUS_TEXT_DEFAULTS)\r\n    if (!VALID_STATUS_NUMS.includes(statusNum)) {\r\n        console.error(\"Validation of status failed: unknown status number\")\r\n        return false\r\n    }\r\n\r\n    return true\r\n}\r\n\r\n\r\n/**\r\n * Checks whether given (database entry) id path is valid according to configuration.\r\n * @param {number} path - The index based id path for a database entry.\r\n */\r\nexport const isValidEntryIdPath = (path) => {\r\n    return ENTRY_ID_PATH_REGEX.test(path)\r\n}","import database from '../utils/database.utils'\r\nimport { isValidIndex, isValidEntryIdPath } from '../utils/validation.utils'\r\nimport { errorHandler } from '../utils/errorHandler.utils'\r\n\r\n\r\n\r\n/**\r\n * GET\r\n * Get all database entries.\r\n * @return {array<object>} The database.\r\n */\r\nconst getDatabase = () => {\r\n    try {\r\n        let db = database.load()\r\n        return db\r\n    } catch(err) {\r\n        errorHandler(err)\r\n    }\r\n}\r\n\r\n/**\r\n * GET\r\n * Get a specific database entry.\r\n * @param {number} path - The path '/:id' including the index of the element to get.\r\n * @return {object} The database entry at the given index.\r\n */\r\nconst getDatabaseEntry = (path) => {\r\n    try {\r\n        if (!isValidEntryIdPath(path)) throw new Error(\"Invalid id path for database entry\")\r\n        // Important, as floats and other number types may be qualified as valid entry path\r\n        // when they can be represented as an integer (see isValidEntryIdPath function for details)\r\n        let idx = parseInt(path.slice(1))\r\n        \r\n        if (!isValidIndex(idx)) throw new Error(\"Invalid index\")\r\n        let db = database.load()\r\n        let entry = db[idx]\r\n        \r\n        if (!entry) throw new Error(\"No entry found at given index\")\r\n        \r\n        return entry\r\n    } catch(err) {\r\n        errorHandler(err)\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * POST\r\n * Appends an object to the database.\r\n * @param {object} obj - An entry.\r\n */\r\nconst appendToDatabase = (obj) => {\r\n    try {\r\n        if (typeof obj !== 'object') throw new Error(\"New database entries have to be objects.\")\r\n        let db = database.load()\r\n        db.push(obj)\r\n        database.save(db)\r\n    } catch(err) {\r\n        errorHandler(err)\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * PUT\r\n * Updates an object entry of the database.\r\n * @param {number} idx - The index of the object to change. \r\n * @param {object} newObj - The object that replaces the old entry.\r\n */\r\nconst updateEntry = (idx, newObj) => {\r\n    try {\r\n        if (typeof newObj !== 'object') throw new Error(\"Database object passed in parameters is invalid.\")\r\n        if (!isValidIndex(idx)) throw new Error(\"Invalid index\")\r\n        let db = database.load()\r\n        db.splice(idx, 1, newObj)\r\n        database.save(db)\r\n    } catch(err) {\r\n        errorHandler(err)\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * DELETE\r\n * Deletes an object from the database.\r\n * @param {number} idx - The index of the element to delete.\r\n */\r\nconst deleteFromDatabase = (idx) => {\r\n    try {\r\n        if (!isValidIndex(idx)) throw new Error(\"Invalid index\")\r\n        let db = database.load()\r\n        db.splice(idx, 1)\r\n        database.save(db)\r\n    } catch(err) {\r\n        errorHandler(err)\r\n    }\r\n}\r\n\r\n\r\n\r\nconst route = {\r\n    getDatabase,\r\n    getDatabaseEntry,\r\n    appendToDatabase,\r\n    updateEntry,\r\n    deleteFromDatabase\r\n}\r\n\r\nexport default route","import rootRoute from './root'\r\nimport { isValidIndex, isValidStatus } from '../utils/validation.utils'\r\nimport { errorHandler } from '../utils/errorHandler.utils'\r\n\r\n\r\n\r\n/**\r\n * PUT\r\n * Update an entry's status.\r\n * @param {number} idx - The index of the element whose status should be updated.\r\n * @param {number} newStatus - The new numeric status of the element in question.\r\n */\r\nconst updateStatus = (idx, newStatus) => {\r\n    try {\r\n        if (!isValidIndex(idx)) throw new Error(\"Invalid index\" + idx)\r\n        if (!isValidStatus(newStatus)) throw new Error(\"Invalid status\")\r\n\r\n        let entry = rootRoute.getDatabaseEntry(\"/\" + idx)\r\n        entry.status = newStatus\r\n        rootRoute.updateEntry(idx, entry)\r\n    } catch(err) {\r\n        errorHandler(err)\r\n    }\r\n}\r\n\r\n\r\n\r\nconst route = {\r\n    updateStatus\r\n}\r\n\r\nexport default route","import rootRoute from './routes/root'\r\nimport statusRoute from './routes/status'\r\n\r\n\r\n\r\n/*                                              */\r\n/* Simulation of REST API on local storage      */\r\n/* Delegates 'requests' to appropriate 'routes' */\r\n/*                                              */\r\n\r\nconst get = (path) => {\r\n    switch (path) {\r\n        case '/':\r\n            return rootRoute.getDatabase\r\n        default:\r\n    //  case '/:id'\r\n    //  e.g., '/35' to get database entry at index 35\r\n            return rootRoute.getDatabaseEntry(path)\r\n    }\r\n}\r\n\r\n\r\nconst post = (path, obj) => {\r\n    switch (path) {\r\n        case '/':\r\n            return rootRoute.appendToDatabase(obj)\r\n    }\r\n}\r\n\r\n\r\nconst put = (path, idx, obj) => {\r\n    switch (path) {\r\n        case '/':\r\n            return rootRoute.updateEntry(idx, obj)\r\n        case '/status':\r\n            return statusRoute.updateStatus(idx, obj)\r\n    }\r\n}\r\n\r\n\r\nconst del = (path, idx) => {\r\n    switch (path) {\r\n        case '/':\r\n            return rootRoute.deleteFromDatabase(idx)\r\n    }\r\n}\r\n\r\n\r\n\r\nconst api = {\r\n    get,\r\n    post,\r\n    put,\r\n    delete: del\r\n}\r\n\r\nexport default api","import React from 'react'\r\nimport { STATUS_TEXT_DEFAULTS } from '../data/jobStatusConfig'\r\nimport api from '../services/api/api'\r\n\r\n/**\r\n * A dropdown to let users select a status option.\r\n * @param {number} itemKey - A numeral key that identifies which database entry's option is considered.\r\n * @param {function} updateCallback - A callback to notify about the status update.\r\n */\r\nconst StatusDropdown = ({ itemKey, updateCallback }) => {\r\n\r\n    // update the status\r\n    const handleChange = (e) => {\r\n        let newOption = e.target.options[e.target.selectedIndex].value\r\n        api.put('/status', itemKey, newOption)\r\n        updateCallback()\r\n    }\r\n\r\n    /* OPTIONS */\r\n    const defaultOption = <option key=\"-1\" value=\"-1\">select status ... </option>\r\n    const configuredOptions = <>\r\n        { Object.entries(STATUS_TEXT_DEFAULTS).map(([key, val]) => {\r\n            return <option key={key} value={key}>{val}</option>\r\n        }) }\r\n    </>\r\n\r\n    /* RENDER */\r\n    return <div className=\"status-dropdown\">\r\n        <select\r\n            name=\"status-dropdown-select\"\r\n            id=\"status-dropdown=select\"\r\n            onChange={(e) => handleChange(e)}\r\n                >\r\n                    { defaultOption }\r\n                    { configuredOptions }    \r\n        </select>\r\n    </div>\r\n}\r\n\r\nexport default StatusDropdown","import React, { useState } from 'react'\r\nimport StatusIndicator from '../components/StatusIndicator'\r\nimport StatusDropdown from '../components/StatusDropdown'\r\n\r\n\r\n\r\n/**\r\n * Toggle between StatusIndicator (state display) and StatusDropdown (state editor).\r\n * @param {number} [statusNumber = 0] - The numeral key of the job status.\r\n * @param {number} itemKey - The index based key for the job item.\r\n * @param {function} updateCallback - The callback to notify about updates.\r\n */\r\nconst StatusToggle = ({ statusNumber = 0, itemKey, updateCallback }) => {\r\n\r\n    /* STATE */\r\n    const [editMode, setEditMode] = useState(false)\r\n    const toggleEditMode = () => setEditMode(!editMode)\r\n\r\n    // callback for children\r\n    const updateStatus = () => {\r\n        updateCallback()\r\n        toggleEditMode()\r\n    }\r\n\r\n    \r\n    /* JSX */\r\n    let content\r\n    if (editMode) {\r\n        content = <StatusDropdown\r\n                    itemKey={itemKey}\r\n                    updateCallback={updateStatus} />\r\n    } else {\r\n        content = <StatusIndicator\r\n                    statusNumber={statusNumber}\r\n                    toggleCallback={toggleEditMode}/>\r\n    }\r\n\r\n    return <span className=\"status-toggle\">{ content }</span>\r\n\r\n}\r\n\r\nexport default StatusToggle","import React from 'react'\r\nimport MaterialIcon from './MaterialIcon'\r\nimport RatingDisplay from './RatingDisplay'\r\nimport StatusToggle from '../containers/StatusToggle'\r\nimport { getAverageRating } from '../utils/rating.utils.js'\r\nimport api from '../services/api/api'\r\n\r\n\r\n\r\n/**\r\n * The detail view containing information and options related to a job.\r\n * @param {object} job - The data related to a job entry.\r\n * @param {number} itemKey - The index based key for the job entry.\r\n * @param {function} toggleCallback - A callback upon toggling the view.\r\n * @param {function} editModeCallback - A callback upon enabling edit mode.\r\n * @param {function} updateCallback - A callback to notify to update.\r\n */\r\nconst JobItemDetailView = ({ job, itemKey, toggleCallback, editModeCallback, updateCallback }) => {\r\n\r\n    /* DATA */\r\n    let totalAvgRating = getAverageRating(job.rating, 2)\r\n\r\n\r\n\r\n    /* FUNCTIONS */\r\n\r\n    // toggle job item detail view (minimize)\r\n    let toggleListener = () => {\r\n        if (window.getSelection().toString().length === 0) toggleCallback()\r\n    }\r\n\r\n    // show an edit form\r\n    let toggleEditMode = () => {\r\n        editModeCallback(itemKey, job)\r\n    }\r\n\r\n    // confirm user delete action\r\n    let confirmDelete = () => {\r\n        let deleteConfirm = window.confirm(\"Do you really want to delete the current job item? It cannot be undone.\")\r\n        if (deleteConfirm) {\r\n            api.delete(\"/\", itemKey)\r\n            updateCallback()\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    /* JSX */\r\n\r\n    \r\n    /* top section */\r\n    /*             */\r\n    const toggleBtn = <span onClick={() => toggleListener()}>\r\n        <MaterialIcon name=\"keyboard_arrow_up\" />\r\n    </span>\r\n    \r\n    const infoHeader = <h3 onClick={() => toggleListener()}>{job.title} @ {job.company}</h3>\r\n    \r\n    const statusToggle = <StatusToggle\r\n        statusNumber={job.status}\r\n        itemKey={itemKey}\r\n        updateCallback={updateCallback}\r\n    />\r\n\r\n    const topSection = <>\r\n        { toggleBtn }\r\n        { infoHeader }\r\n        { statusToggle }\r\n    </>\r\n\r\n\r\n\r\n\r\n    /* data sections */\r\n    /*               */\r\n    const subheaderSection = <div className=\"subheader\">\r\n        <MaterialIcon name=\"location_on\" extraClasses=\"blue\" /> {job.location}\r\n        <MaterialIcon name=\"hourglass_top\" extraClasses=\"green\" /> {job.timeModel}\r\n    </div>\r\n\r\n    const specsSection = <div className=\"specs\">\r\n        <div><MaterialIcon name=\"list_alt\" extraClasses=\"purple\" /> {job.contractTerm}</div>\r\n        <div><MaterialIcon name=\"attach_money\" extraClasses=\"green\" /> {job.salary}</div>\r\n    </div>\r\n\r\n    const notesSection = <p>\r\n        <MaterialIcon name=\"rate_review\" extraClasses=\"blue\" />\r\n        {job.notes}\r\n    </p>\r\n\r\n\r\n\r\n\r\n    /* Rating section */\r\n    /*                */\r\n\r\n    const ratingHeader = <h3>Rating</h3>\r\n\r\n    // displays the different rating criteria\r\n    const ratingCategories = <>\r\n        {\r\n            Object.entries(job.rating).map(([rkey, rval], mapKey) => {\r\n                return <div key={mapKey}>\r\n                            <strong>{rkey}: </strong>\r\n                            <RatingDisplay rating={rval} />\r\n                            <span> ({rval})</span>\r\n                </div>\r\n            })\r\n        }\r\n    </>\r\n\r\n    const ratingTotal = <div>\r\n        <strong>Total: </strong> \r\n        {      \r\n            <>\r\n                <RatingDisplay rating={totalAvgRating} />\r\n                <strong> ({totalAvgRating})</strong>\r\n            </>\r\n        }\r\n    </div>\r\n\r\n    const ratingSection = <div className=\"rating\">\r\n        { ratingHeader }\r\n        { ratingCategories }\r\n        { ratingTotal }\r\n    </div>\r\n\r\n    \r\n\r\n\r\n    /* Buttons section */\r\n    /*                 */\r\n    const itemEditBtn = <button\r\n                            className=\"item-edit-btn\"\r\n                            type=\"submit\"\r\n                            onClick={() => toggleEditMode()}\r\n                                >\r\n                            Edit Item\r\n                        </button>\r\n\r\n    const itemDeleteBtn = <button\r\n                            className=\"item-delete-btn\"\r\n                            type=\"submit\"\r\n                            onClick={() => confirmDelete()}\r\n                                >\r\n                            Delete Item\r\n                        </button>\r\n\r\n    const buttonsSection = <>\r\n        { itemEditBtn }\r\n        { itemDeleteBtn }\r\n    </>\r\n\r\n\r\n\r\n    \r\n\r\n    /* RENDER */\r\n\r\n    return (\r\n        <div className=\"job-item-detail-view\">\r\n\r\n            <div className=\"top-pane\" >            \r\n                { topSection }\r\n            </div>\r\n\r\n            <div className=\"main-pane\">\r\n                { subheaderSection }\r\n                { specsSection }\r\n                { notesSection }\r\n                { ratingSection }\r\n            </div>\r\n\r\n            <div className=\"bottom-pane\">\r\n                { buttonsSection }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JobItemDetailView;","import React, {useState} from 'react';\r\nimport JobItemPreview from \"../components/JobItemPreview\"\r\nimport JobItemDetailView from '../components/JobItemDetailView';\r\n\r\n\r\n\r\n/**\r\n * A toggle for JobItemPreview (minimized) and JobItemDetailView (maximized).\r\n * @param {object} job - A job's data to be displayed.\r\n * @param {number} itemKey - An index based key for the job item.\r\n * @param {function} editModeCallback - A callback to request edit mode toggle.\r\n * @param {function} updateCallback - A callback to notify about updates.\r\n */\r\nconst JobItemToggle = ({ job, itemKey, editModeCallback, updateCallback }) => {\r\n\r\n    /* STATE */\r\n    const [expanded, setExpanded] = useState(false)\r\n    const toggleExpanded = () => setExpanded(!expanded)\r\n\r\n    \r\n    if (!expanded) {\r\n        return <JobItemPreview job={job} toggleCallback={toggleExpanded} />\r\n\r\n    } else {\r\n        return <JobItemDetailView\r\n            job={job}\r\n            itemKey={itemKey}\r\n            toggleCallback={toggleExpanded}\r\n            editModeCallback={editModeCallback}\r\n            updateCallback={() => updateCallback()} />\r\n    }\r\n}\r\n\r\nexport default JobItemToggle;","import React from 'react';\r\nimport JobItemToggle from \"../containers/JobItemToggle\"\r\n\r\n\r\n\r\n/**\r\n * A container for job items.\r\n * @param {array<object>} jobs - All jobs to be displayed.\r\n * @param {function} updateCallback - A callback to notify about updates.\r\n * @param {function} editModeCallback - A callback to request edit mode toggle.\r\n */\r\nconst JobList = ({ jobs, updateCallback, editModeCallback }) => {\r\n\r\n    let content\r\n\r\n    if (!jobs || jobs.length === 0) {\r\n        content = <span className=\"centered\">no job items</span>\r\n        \r\n    } else {\r\n        content = jobs.map((job, key) => {\r\n            return <JobItemToggle\r\n                        job={job}\r\n                        key={key}\r\n                        itemKey={key}\r\n                        editModeCallback={editModeCallback}\r\n                        updateCallback={() => updateCallback()}\r\n                    />\r\n        })\r\n    }\r\n\r\n    return <div className=\"job-list\">{ content }</div>\r\n}\r\n\r\nexport default JobList;","import React, { useState, useEffect } from 'react'\r\nimport _ from 'lodash'\r\nimport MaterialIcon from '../components/MaterialIcon'\r\n\r\n\r\n\r\n/**\r\n * Extra component for visualizing steps given parameter configuration.\r\n * @param {number} [currentIndex=0] - The active index.\r\n * @param {number} [maxIndex=0] - The maximum value currentIndex can become.\r\n * @param {string} [iconName=\"stop_circle\"] - The name of the Material Icon.\r\n * @param {string} [finishedIndexColor=\"green\"] - The color highlight for finished indices.\r\n * @param {string} [activeIndexColor=\"blue\"] - The color highlight for the current index.\r\n * @param {string} [inactiveIndexColor=\"gray\"] - The color highlight for all other (unfinished) indices.\r\n */\r\nconst StepVisualizer = ({   currentIndex=0,\r\n                            maxIndex=0,\r\n                            iconName=\"stop_circle\",\r\n                            finishedIndexColor=\"green\",\r\n                            activeIndexColor=\"blue\",\r\n                            inactiveIndexColor=\"gray\" }) => {\r\n\r\n    const FINISHED_ICON = (key) => <MaterialIcon\r\n                            key={\"fi\" + key}\r\n                            name={iconName}\r\n                            extraClasses={finishedIndexColor} />\r\n\r\n    const ACTIVE_ICON = (key) => <MaterialIcon\r\n                            key={\"ai\" + key}\r\n                            name={iconName}\r\n                            extraClasses={activeIndexColor} />\r\n\r\n    const INACTIVE_ICON = (key) => <MaterialIcon\r\n                            key={\"ii\" + key}\r\n                            name={iconName}\r\n                            extraClasses={inactiveIndexColor} />\r\n\r\n\r\n    const output = <div className=\"step-visualizer\">\r\n        { _.times(currentIndex, (key) => FINISHED_ICON(key)) }\r\n        { ACTIVE_ICON(0) }\r\n        { _.times(maxIndex - currentIndex, (key) => INACTIVE_ICON(key)) }\r\n    </div>\r\n\r\n    return output\r\n}\r\n\r\n\r\n\r\n/**\r\n * Main component for paginating the given children.\r\n * @param {React.Children} children - The Children passed in from the containing element.\r\n * @param {number} [initialIndex = 0] - The index of the page to be shown on render.\r\n * @param {function} setIsFinalStep - A callback for notifying when final step (index) is reached.\r\n */\r\nconst StepDivider = ({ children, initialIndex=0, setIsFinalStep }) => {\r\n\r\n    /* DATA / STATE */\r\n    const [index, setIndex] = useState(initialIndex)\r\n    const MAX_INDEX = React.Children.count(children) - 1\r\n\r\n    // watch for reaching final step\r\n    useEffect(() => {\r\n        setIsFinalStep(index === MAX_INDEX)\r\n    }, [index])\r\n    \r\n\r\n\r\n    /* JSX */\r\n\r\n    let stepVisualizer = <StepVisualizer\r\n                            currentIndex={index}\r\n                            maxIndex={MAX_INDEX} />\r\n\r\n    let mainContent = <>{ children[index] }</>\r\n\r\n\r\n    let leftBtn = <button\r\n                    onClick={() => setIndex(index - 1)}>\r\n                    <MaterialIcon\r\n                        name=\"keyboard_arrow_left\"\r\n                    />\r\n    </button>\r\n\r\n    let rightBtn = <button\r\n                    onClick={() => setIndex(index + 1)}>\r\n                    <MaterialIcon\r\n                        name=\"keyboard_arrow_right\"\r\n                    />\r\n    </button>\r\n\r\n    let btns = <div className=\"step-divider-btns\">\r\n        { index > 0 && leftBtn }\r\n        { index < MAX_INDEX && rightBtn }\r\n    </div>\r\n    \r\n\r\n    /* RENDER */\r\n    return <div className=\"step-divider\">\r\n        { stepVisualizer }\r\n        { mainContent }\r\n        { btns }\r\n    </div>\r\n}\r\n\r\nexport default StepDivider","import React from 'react'\r\n\r\n/**\r\n * Controlled input item with label.\r\n * @param {string} label - A label to display.\r\n * @param {string} inKey - A key to use for data related aspects.\r\n * @param {string} value - What the user enters into the input field.\r\n * @param {function} handleChangeCb - Callback function to be invoked when value changes.\r\n */\r\nconst InputItem = ({ label, inKey, value, handleChangeCb }) => {\r\n    \r\n    return <>\r\n        <label htmlFor={inKey}>{label}</label>\r\n        <input \r\n            key={inKey}\r\n            type=\"text\"\r\n            name={inKey}\r\n            value={value}\r\n            onChange={e => handleChangeCb(e)}\r\n            />\r\n    </>\r\n}\r\nexport default InputItem","export const RATING_LINE_REGEX = /^([A-Za-z]{1,50}:(0|1)?[0-9])$/","import React, { useState, useEffect } from 'react'\r\nimport { RATING_LINE_REGEX } from '../data/jobRatingConfig'\r\n\r\n\r\n\r\n/**\r\n * A form to enter key-value pairs of 'category:rating'.\r\n * @param {object} previousRating - An object with key-value pairs for categories and their numeric ratings.\r\n * @param {function} sendData - A callback to send the data collected with this component.\r\n */\r\nconst JobRatingItem = ({ previousRating, sendData }) => {\r\n\r\n    /* DATA */\r\n    const [text, setText] = useState(\"\")\r\n    const HAS_PREVIOUS_RATING = Object.keys(previousRating).length > 0\r\n\r\n\r\n    /* INITIALIZE */\r\n    useEffect(() => {\r\n        // load previous rating data object to textfield if given\r\n        if (HAS_PREVIOUS_RATING) {\r\n            let newText = \"\"\r\n            Object.entries(previousRating).forEach(([key, val]) => {\r\n                newText += key + \":\" + val + \"\\n\"\r\n            })\r\n            // remove last newline\r\n            setText(newText.slice(0, newText.length - 1))\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    /* FUNCTIONS / HANDLERS */\r\n\r\n    const handleChange = (e) => {\r\n        setText(e.target.value)\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        try {\r\n            if (!isValidRating()) throw new Error(\"invalid rating\")\r\n\r\n            let ratingsArr = text.split(\"\\n\")\r\n            let ratingsObj = {}\r\n\r\n            // assemble rating object\r\n            ratingsArr.forEach(rating => {\r\n                let [key, val] = rating.split(\":\")\r\n                ratingsObj[key] = parseInt(val)\r\n            })\r\n\r\n            sendData(ratingsObj)\r\n            alert(\"Saved valid rating\")\r\n\r\n        } catch(err) {\r\n            console.log(err)\r\n            alert(\"Oops, something went wrong. \" + err)\r\n        }\r\n    }\r\n\r\n    // check if each rating line matches the configuration.\r\n    const isValidRating = () => {\r\n        let inputArr = text.split(\"\\n\")\r\n        return inputArr.every(line => RATING_LINE_REGEX.test(line))\r\n    }\r\n\r\n\r\n\r\n\r\n    /* JSX */\r\n\r\n    const textAreaLabel = <label htmlFor=\"job-rating-input\">\r\n        Add a rating\r\n    </label>\r\n\r\n    const textArea = <textarea\r\n                        name=\"job-rating-input\"\r\n                        id=\"job-rating-input\"\r\n                        cols=\"30\"\r\n                        rows=\"10\"\r\n                        onChange={(e) => handleChange(e)}\r\n                        value={text}\r\n                        >\r\n                    </textarea>\r\n\r\n    const userInfo = <p>\r\n        Please enter your rating items in the form <strong>'category:rating'</strong>, where <strong>category</strong> can be an alphabetic name for anything you want to rate, and <strong>rating</strong> is an integer from 0 to 10. Separate each item with a <strong>new line</strong>.\r\n    </p>\r\n\r\n    const submitBtn = <button\r\n                        type=\"submit\"\r\n                        onClick={() => onSubmit()}\r\n                        >\r\n                            Save rating\r\n                    </button>\r\n\r\n\r\n\r\n    /* RENDER */\r\n    \r\n    return <div className=\"job-rating-item\">\r\n        { textAreaLabel }\r\n        { textArea }\r\n        { userInfo }\r\n        { submitBtn }\r\n    </div>\r\n}\r\n\r\nexport default JobRatingItem","export const STEP_CONFIG = [\r\n    [\"Title\", \"Company\", \"Location\"],\r\n    [\"Time Model\", \"Contract Term\", \"Salary\"],\r\n    [\"Link\", \"Notes\"]\r\n]\r\n\r\nexport const OBJ_VALUE_REGEX = /^[A-Za-z0-9\\s\\-_,:.!]*$/","import React, { useState, useEffect } from 'react'\r\nimport StepDivider from './StepDivider'\r\nimport InputItem from '../components/InputItem'\r\nimport JobRatingItem from '../components/JobRatingItem'\r\nimport { pascalToCamel } from '../utils/text.utils'\r\nimport { STEP_CONFIG, OBJ_VALUE_REGEX } from '../data/jobItemFormConfig.js'\r\nimport api from '../services/api/api'\r\n\r\n\r\n\r\n/**\r\n * A form to enter details for creating a job item entry in the database.\r\n * @param {function} toggleFormCallback - A callback to request form toggle.\r\n * @param {object} [previousObject = {}] - An optional previous / preloadable object.\r\n * @param {number} [previousIndex = -1] - An optional previous index.\r\n */\r\nconst JobItemForm = ({ toggleFormCallback, previousObject = {}, previousIndex = -1 }) => {\r\n\r\n    /* STATE */\r\n    const [state, setState] = useState({})\r\n    const [rating, setRating] = useState({})\r\n    const [isFinalStep, setIsFinalStep] = useState(false)\r\n    \r\n    const hasPreviousObject = () => {\r\n        return (typeof previousObject === 'object'\r\n            && Object.keys(previousObject).length > 0)\r\n    }\r\n\r\n\r\n\r\n    // load a previous state if it exists\r\n    useEffect(() => {\r\n        if (hasPreviousObject()) {\r\n            setState(previousObject)\r\n            if (previousObject.rating) {\r\n                setRating(previousObject.rating)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    /* FORM CHANGE HANDLER */\r\n    const handleChange = (e) => {\r\n        let current = { [e.target.name]: e.target.value }\r\n        setState({...state, ...current})\r\n    }\r\n\r\n\r\n    /* SUBMIT HANDLER */\r\n    const onSubmit = () => {\r\n        try {\r\n            if (!isValidInput(state)) throw new Error(\"Invalid input\")\r\n\r\n            // non user-defined data\r\n            let now = Date.now()\r\n            let meta = { createdAt: now, editedAt: now }\r\n\r\n            let newData\r\n            \r\n            // EDIT EXISTING ENTRY\r\n            if (hasPreviousObject()) {\r\n                newData = { ...state, rating }\r\n                api.put('/', previousIndex, newData)\r\n\r\n            // CREATE NEW ENTRY\r\n            } else {\r\n                newData = { ...state, status: 0, rating, ...meta }\r\n                api.post('/', newData)\r\n            }\r\n\r\n            toggleFormCallback()\r\n\r\n        } catch(err) {\r\n            alert(err)\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks whether all values of an inputObj match the configuration.\r\n     * @param {object} inputObj - The job data object.\r\n     */\r\n    const isValidInput = (inputObj) => {\r\n\r\n        let flatProps = JSON.parse(JSON.stringify(inputObj))\r\n        delete flatProps.rating\r\n\r\n        return Object.values(flatProps).every(val => {\r\n            return OBJ_VALUE_REGEX.test(val)\r\n        })\r\n    }\r\n\r\n    \r\n\r\n\r\n    /* JSX components */\r\n\r\n    let header = <h3>{ hasPreviousObject() ? \"Edit\" : \"Add\" }  a job</h3>\r\n\r\n    const ratingSection = <JobRatingItem previousRating={rating} sendData={setRating} />\r\n\r\n    // PAGINATION -> INPUT FIELDS + RATING on last page\r\n    const content = <StepDivider setIsFinalStep={setIsFinalStep}>\r\n\r\n        { STEP_CONFIG.map((stepLabels, key) => {\r\n            return <div key={\"step-\" + (key + 1)}>\r\n\r\n                { stepLabels.map(label => {\r\n                    let inKey = pascalToCamel(label)\r\n                    return <InputItem\r\n                                key={label}\r\n                                label={label}\r\n                                inKey={inKey}\r\n                                value={state[inKey] || \"\"}\r\n                                handleChangeCb={handleChange}\r\n                                 />\r\n                }) }\r\n\r\n            { isFinalStep && ratingSection }\r\n\r\n            </div> })\r\n        }\r\n    </StepDivider>\r\n\r\n\r\n\r\n    const submitBtn = <button\r\n        className=\"form-submit-btn\"\r\n        type=\"submit\"\r\n        onClick={() => onSubmit()}>\r\n            Add\r\n    </button>\r\n\r\n    const cancelBtn = <button\r\n        className=\"form-cancel-btn\"\r\n        type=\"submit\"\r\n        onClick={() => toggleFormCallback()}>\r\n        Cancel\r\n    </button>\r\n\r\n\r\n\r\n\r\n    /* RENDER */\r\n    \r\n    return <div className=\"job-item-form\">\r\n        { header }\r\n        { content }\r\n        \r\n        <div className=\"btns\">\r\n            { isFinalStep && submitBtn }\r\n            { cancelBtn }\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default JobItemForm","/**\r\n * Transforms pascal to camel case.\r\n * @param {string} text - String of text in PascalCase (also with single whitespace).\r\n * @return {string} String in camelCase.\r\n */\r\nexport const pascalToCamel = (text) => {\r\n    try {\r\n        if (typeof text !== \"string\") throw new Error(\"Input parameter is not a string.\")\r\n        if (text.trim() === \"\") throw new Error(\"Input does not contain anything but whitespace.\")\r\n        \r\n        // remove single whitespace if there are any\r\n        const spaceless = text.split(\" \").join(\"\")\r\n        return spaceless.charAt(0).toLowerCase() + spaceless.slice(1)\r\n    } catch(err) {\r\n        console.error(err)\r\n        return \"error\"\r\n    }\r\n}","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return <div className=\"app-header\">\r\n        <span>\r\n            JAPP\r\n        </span>\r\n        <span>\r\n            <nav>\r\n                <a href=\"#\">Home</a>\r\n                <a href=\"#about\">About</a>\r\n            </nav>\r\n        </span>\r\n    </div>\r\n}\r\nexport default Header","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return <div className=\"app-footer\" id=\"about\">\r\n        <p>JAPP - Job Application Manager v0.1.1 (alpha)</p>\r\n        <sub>&copy;2020, Michael Woei Kang Huang</sub>\r\n    </div>\r\n}\r\n\r\nexport default Footer;","import React, { useState, useEffect } from 'react';\r\nimport JobList from './containers/JobList.jsx'\r\nimport JobItemForm from './containers/JobItemForm'\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\nimport api from './services/api/api'\r\nimport './App.scss';\r\n\r\n\r\n\r\n/**\r\n * JAPP - Job Application Manager.\r\n * A web application to help you log and track your application process across different job postings.\r\n * This app is completely client based, which means that all your data stays on your browser via localStorage.\r\n * This also means that everyone with access to your computer can use this app.\r\n * \r\n * Please make sure to not clear localStorage if you want to keep your data.\r\n */\r\nconst App = () => {\r\n  /* DATABASE STATE */\r\n  const [data, setData] = useState([])\r\n  const updateView = () => setData(api.get('/'))\r\n\r\n  /* INITIALIZATION */\r\n  useEffect(() => updateView(), [])\r\n\r\n  \r\n  /* UI STATE */\r\n  const [showJobItemForm, setShowJobItemForm] = useState(false);\r\n  const toggleJobItemForm = () => setShowJobItemForm(!showJobItemForm);\r\n  const [editMode, setEditMode] = useState(false)\r\n  // preload of data when editing job via JobItemForm\r\n  const [jobEditData, setJobEditData] = useState({itemKey: 0, jobItem: {}})\r\n  \r\n\r\n\r\n  /* CALLBACKS */\r\n\r\n  const toggleFormCallback = () => {\r\n    // hiding JobItemForm with possible updates\r\n    if (showJobItemForm) {\r\n      setEditMode(false)\r\n      updateView()\r\n    }\r\n    toggleJobItemForm()\r\n  }\r\n\r\n\r\n  /**\r\n   * Shows the JobItemForm in edit mode (preloaded with data).\r\n   * @param {number} itemKey - The index based key of the current jobItem.\r\n   * @param {object} jobItem - The data for a job item.\r\n   */\r\n  const showEditFormCallback = (itemKey, jobItem) => {\r\n    setJobEditData({ itemKey, jobItem })\r\n    setEditMode(true)\r\n    toggleJobItemForm()\r\n  }\r\n\r\n\r\n\r\n  /* RENDER */\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      { !showJobItemForm && <button\r\n                              className=\"job-item-form-btn\"\r\n                              onClick={() => toggleJobItemForm()}\r\n                            >\r\n                              Add a job item\r\n                            </button> }\r\n      { !showJobItemForm && <JobList jobs={data} editModeCallback={showEditFormCallback} updateCallback={() => updateView()} /> }\r\n\r\n      { (showJobItemForm && !editMode) && <JobItemForm toggleFormCallback={toggleFormCallback} /> }\r\n      { (showJobItemForm && editMode) && <JobItemForm\r\n                                            toggleFormCallback={toggleFormCallback}\r\n                                            previousObject={jobEditData.jobItem}\r\n                                            previousIndex={jobEditData.itemKey} /> }\r\n      \r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}